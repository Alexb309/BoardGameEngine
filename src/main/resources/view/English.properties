saveBoard=Save Board
loadBoard=Load Board
placePiece=Place Piece
drawBoard=Draw Board
clearPieces=Clear Pieces
xDimLabel=Num Cols
yDimLabel=Num Rows
boardTypePicker=Board Type
eraser=Erase Pieces
save=Save
load=Load
editSquare=Edit Square Color
color=Color
showGrid=Show Grid
boardTitle=Configure Board And Place Pieces
pieceTitle=Configure And Create Pieces
actionTitle=Create Actions for Rules
conditionTitle=Create Conditions for Rules
ruleTitle=Create Rules for Pieces
winConditionTitle = Set the Win Conditions
metadataTitle=Create Metadata for Your Game
helpTitle=Read Descriptions for Each Tab
InvalidElementName=The name for this %s contains forbidden characters.\nNames are limited to alphanumeric characters, spaces, and a limited selection of special characters.

new-piece=New Piece
new-action=New Action
new-condition=New Condition
new-rule=New Rule
new-metadata=Game Metadata
new-winCondition = New Win-Condition

board=Board
piece=Piece
action=Action
condition=Condition
rule=Rule
metadata=Metadata
winCondition=Win-Condition
help=Help

board-help=Use this tab to configure the board layout that you want to play the game on. \n You can create a checkers board of specified shape and colors. You can then edit the colors of individual squares, display the grid, and place pieces once they are created in the pieces tab.
piece-help=Use this tab to configure the pieces used in the game.
action-help = Use this tab to add actions to be attached to rules to be used in the game.
condition-help = Use this tab to add condition to be attached to rules to be used in the game.
rule-help = Use this tab to add rules to the game by attaching created conditions and actions
winCondition-help = Use this tab to add win conditions to the game which activate when a list of conditions are met.
metadata-help = Use this tab to enter the Meta Data.
help-help= Use this tab to gain information on all the other tabs and their unique properties to be able to build a game.

winCondition-conditions-help = Conditions - All conditions that must be satisfied for the game to end
winCondition-type-help = Select Type: Choose the type of win condition to add. This "type" corresponds to how a winner is decided once the conditions are met

piece-image-help = Image: Upload an image file to be used as the piece sprite
piece-id-help = Id: Give an unique integer as the id for this piece
piece-player-help = Player: specify which player can use this piece

action-type-help = Select Type: Choose the type of action property to add. All actions are relative to the piece (ie. (1,1) is 1 square right and up from the selected piece)

Translate-help= Translate: Ability to move a piece
Translate-srcx-help = Translate - srcx : Starting position relative to the piece x-cord
Translate-srcy-help = Translate - srcy : Starting position relative to the piece y-cord
Translate-x-help = Translate - x : Position that piece could move to relative to starting x position
Translate-y-help = Translate - y : Position that piece could move to relative to starting y position

Place-help = Place: Ability to place a piece
Place-x-help = Place - x : Can place a piece at this x position relative to the selected piece
Place-y-help =  Place - y : Can place a piece at this y position relative to the selected piece

Remove-help = Remove: Ability to remove a piece
Remove-x-help = Remove - x : Can capture a piece this x position relative to the selected piece
Remove-y-help = Remove - y : Can capture a piece this x position relative to the selected piece

condition-type-help = Select Type: Choose the type of condition property to add. All conditions are relative to the piece (ie. (1,1) is 1 square right and up from the selected piece)

IsEmpty-help=IsEmpty: Condition for if a square is empty.
IsEmpty-x-help= IsEmpty - x: Condition for if the square relative in x-direction is empty.
IsEmpty-y-help=IsEmpty - y: Condition for if the square relative in y-direction is empty.

IsOccupied-help= IsOccupied: Condition for if a square is occupied.
IsOccupied-x-help= IsOccupied - x: Condition for if the square relative in x-direction is occupied.
IsOccupied-y-help= IsOccupied - y: Condition for if the square relative in y-direction is occupied.

IsPieceType-help= IsPieceType: Condition for if a piece of a certain type is in a square.
IsPieceType-x-help=IsPieceType - x: Condition for if the there is a piece of a specified id relative in x-direction.
IsPieceType-y-help= IsPieceType - y: Condition for if the there is a piece of a specified id relative in y-direction.
IsPieceType-id-help= IsPieceType - id: Id for piece considered for the condition

IsPlayerPiece-help = IsPlayerPiece: Condition for if a piece of a certain player is in a square.
IsPlayerPiece-x-help= IsPlayerPiece - x: Condition for if there is a piece of a specified player relative in x-direction.
IsPlayerPiece-y-help=IsPlayerPiece - y: Condition for if there is a piece of a specified player relative in y-direction.
IsPlayerPiece-id-help= IsPlayerPiece - id: Player number for piece considered for the condition


IsPlayer-help = IsPlayer: Condition for a specified player.
IsPlayer-id-help= IsPlayer - id: Specify the player to satisfy this condition.

PlayerHasNoPieces-help= PlayerHasNoPieces: Condition for if there are no pieces left.
BoardFull-help= BoardFull: Condition for if the board if Full.
NoMovesLeft-help = NoMovesLeft: Condition for if there are no pieces left.

NInARow-help= NInARow: Condition for if pieces of same type are in a row.
NInARow-n-help= NInARow - n: Specify how many pieces to be in a row to satisfy this condition.

metadata-author-help = Author : Write in the author for the game
metadata-description-help = Description : Write in the description for the game

rule-representativeX-help = Representative X: x position for where the user can execute this rule relative to the piece.
rule-representativeY-help = Representative Y: y position for where the user can execute this rule relative to the piece.
rule-conditions-help = Conditions: conditions to attach to the rule
rule-actions-help = Actions: actions to attach to the rule

Draw-help = Draw: Cause a draw if the conditions met


MostPieces-help = MostPieces: Cause the player with the most pieces wins if the conditions are met.
NoMovesForOnePlayer-help = NoMovesForOnePlayer: Cause the player with no moves left to lose the game.
PlayerWins-help = PlayerWins: Cause the specified player to win under the specified conditions/
PlayerWins-id-help = PlayerWins - id: ID for which player wins.

game-element-list-add-action=Add Action
game-element-list-add-condition=Add Condition

defaultName-piece=Piece Name
defaultName-action=Action Name
defaultName-condition=Condition Name
defaultName-winCondition=Win-Condition Name
defaultName-rule=Rule Name
defaultName-metadata=Game Name

Welcome=OOGABOOGA - Login
Proceed=Proceed
initialInfoTitle=OOGASALAD
initialInfoAuthor=OOGABOOGA
initialInfoDescription=Please select a game to see its description.

